/*


    pub fn fix_polygons(&mut self) {
        /*
        // We only have to fix one edge, arbitrarily chosen to be the left edge, since the caller
        // will rotate the whole map four times, calling this function once per rotation.
        // let y_axis_segment = LineSegment::new(&Point::new(0.0, 0.0), &Point::new(0.0, 1.0));
        for polygon in self.vor_polygons.iter_mut().filter(|polygon| polygon.x_min() < 0.0) {
            // This polygon has at least one point past the left edge, that is x < 0.0.
            let points_outside: Vec<(usize, Point)> = polygon
                .vertex_points
                .iter()
                .enumerate()
                .filter(|(_, point)| point.x < 0.0)
                .map(|point| point.clone())
                .collect();
            match points_outside.len() {
                1 => {
                    // Replace with two points, forming a line segment that lies on the left edge.
                    let index_outside = points_outside[0].0;
                    polygon.vertex_points.remove(index_outside);

                }

            }

        }
        */
    }

    /*
    pub fn fix_polygons(&mut self) {
        let boundary_polygon = polygon![(x: 0.0f64, y: 0.0f64), (x: 0.0f64, y: 1.0f64), (x: 1.0f64, y: 1.0f64), (x: 1.0f64, y: 0.0f64)];
        // let boundary_polygon = polygon![[0.0f64, 0.0f64], [0.0f64, 0.5f64], [0.5f64, 0.5f64], [0.5f64, 0.0f64]];
        //let mut new_polygons = vec![];
        for polygon in self.vor_polygons.iter() {
            // let old_poly: polygon![polygon.vertex_points.iter().map(|point| (point.x, point.y)).collect()];
            let old_poly = polygon![(x: 0.5f64, y: 0.5f64), (x: 0.75f64, y: 1.5f64), (x: 1.5f64, y: 1.5f64), (x: 0.8f64, y: 0.3f64)];
            let new_poly = old_poly.intersection(&boundary_polygon);
            //bg!(&polygon, &old_poly, &new_poly);
            // let (x_min, x_max, y_min, y_max) = point_bounds(&polygon.vertex_points);
            //if x_min < 0.0 || x_max > 1.0 || y_min < 0.0 || y_max > 1.0 {
            if old_poly != new_poly {
                dbg!(&polygon, &old_poly, &new_poly);
                // dbg!(x_min, x_max, y_min, y_max);
                panic!();
            }
            // if old_poly != new_poly[0] {
            //     panic!();
            //}

            // if old_poly == new_poly {
            //     new_polygons.push(polygon);
            // } else {
            //     dbg!(&polygon, &old_poly, &new_poly);

            /*
            let poly = Polygon::new(None);
            for p in new_poly.iter() {
                poly.push(Point::new(p[0], p[1]));
            }
            */
        }
    }

    pub fn fix_polygons(&mut self) {
        // let boundary_polygon = vec![[0.0f64, 0.0f64], [0.0f64, 1.0f64], [1.0f64, 1.0f64], [1.0f64, 0.0f64]];
        let boundary_polygon = vec![[0.0f64, 0.0f64], [0.0f64, 0.5f64], [0.5f64, 0.5f64], [0.5f64, 0.0f64]];
        //let mut new_polygons = vec![];
        for polygon in self.vor_polygons.iter() {
            let old_poly: Vec<[f64; 2]> = polygon.vertex_points.iter().map(|point| [point.x, point.y]).collect();
            let new_poly = polygon2::intersection(&old_poly, &boundary_polygon);
            //bg!(&polygon, &old_poly, &new_poly);
            debug_assert_eq!(1, new_poly.len());
            let (x_min, x_max, y_min, y_max) = point_bounds(&polygon.vertex_points);
            if x_min < 0.0 || x_max > 1.0 || y_min < 0.0 || y_max > 1.0 {
                dbg!(&polygon, &old_poly, &new_poly);
                dbg!(x_min, x_max, y_min, y_max);
                panic!();
            }
            // if old_poly != new_poly[0] {
            //     panic!();
            //}

            // if old_poly == new_poly {
            //     new_polygons.push(polygon);
            // } else {
            //     dbg!(&polygon, &old_poly, &new_poly);

                /*
                let poly = Polygon::new(None);
                for p in new_poly.iter() {
                    poly.push(Point::new(p[0], p[1]));
                }
                */
        }
    }
    */


*/

/*
fn try_rotate() {
    let mut p = Point::new_with_id(0.7, 0.1);
    dbg!(&p);
    let axis_point = Point::new(0.5, 0.5);
    p.rotate(&axis_point);
    dbg!(&p);
    p.rotate(&axis_point);
    dbg!(&p);
    p.rotate(&axis_point);
    dbg!(&p);
}
*/

// ColorBrewer: sequential, 9-class oranges. Lighter colors first.
// ['rgb(255,245,235)','rgb(254,230,206)','rgb(253,208,162)','rgb(253,174,107)','rgb(253,141,60)','rgb(241,105,19)','rgb(217,72,1)','rgb(166,54,3)','rgb(127,39,4)']


/*
fn value_nans_last<T: Float>(a: &T, b: &T) -> Ordering {
    match (a, b) {
        (x, y) if x.is_nan() && y.is_nan() => Ordering::Equal,
        (x, _) if x.is_nan() => Ordering::Greater,
        (_, y) if y.is_nan() => Ordering::Less,
        (_, _) => a.partial_cmp(b).unwrap()
    }
}
*/

/*
fn float_value_nans_panic_f64(a: f64, b: f64) -> Ordering {
    match (a, b) {
        (x, y) if x.is_nan() || y.is_nan() => panic!(),
        (_, _) => a.partial_cmp(&b).unwrap()
    }
}
*/

/*
impl Ord for Point {
    fn cmp(&self, other: &Self) -> Ordering {
        self.key().cmp(&other.key())
    }
}

impl PartialOrd for Point {
    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
        Some(self.cmp(other))
    }
}

impl PartialEq for Point {
    fn eq(&self, other: &Self) -> bool {
        (self.value, &self.name) == (other.value, &other.name)
    }
}
*/

/*
impl Add for Point {
    type Output = Point;

    fn add(self, rhs: Self) -> Self::Output {
        Point::new(self.x + rhs.x, self.y + rhs.y)
    }
}

impl AddAssign for Point {
    fn add_assign(&mut self, rhs: Self) {
        self.x += rhs.x;
        self.y += rhs.y;
    }
}

impl Sub for &mut Point {
    type Output = Point;

    fn sub(&mut self, rhs: &Self) -> Self::Output {
        Point::new(self.x - rhs.x, self.y - rhs.y)
    }
}
*/

        // let mut bounds = Bounds::from_points(&self.all_points()[..]);
        let mut bounds = Bounds::new(0.0.into(), 1.0.into(), 0.0.into(), 1.0.into());
        let scale_width: F = f(MAP_WIDTH) / bounds.width();
        let scale_height: F = f(MAP_HEIGHT) / bounds.height();
        let scale_map_to_d3 = *vec![scale_width, scale_height].iter().min().unwrap();
        bounds.scale_to_d3 = Some(scale_map_to_d3);
